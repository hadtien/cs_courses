#udacity CS

# --------------
# User Instructions
#
# Write a function, longest_subpalindrome_slice(text) that takes 
# a string as input and returns the i and j indices that 
# correspond to the beginning and end indices of the longest 
# palindrome in the string. 
#
# Grading Notes:
# 
# You will only be marked correct if your function runs 
# efficiently enough. We will be measuring efficency by counting
# the number of times you access each string. That count must be
# below a certain threshold to be marked correct.
#
# Please do not use regular expressions to solve this quiz!

def is_pal(text):
    for i in range(len(text) / 2):
        if text[i] != text[-i-1]:
            return False
    return True

def eq_dists_gen(text):
    for pal_len in range(len(text), 1, -1): #iter on max pal lengths
        ind = 0
        while ind + pal_len <= len(text):
            if text[ind] == text[ind + pal_len - 1]:
                yield ind, ind + pal_len
            ind += 1
        pal_len += 1


def longest_subpalindrome_slice(text):
    "Return (i, j) such that text[i:j] is the longest palindrome in text."
    if len(text) < 2 : return 0, len(text)
        
    text = text.upper()

    for i,j in eq_dists_gen(text):
        if is_pal(text[i:j]):
            return i,j

    return 0,1


  
def test():
    L = longest_subpalindrome_slice
    assert L('racecar') == (0, 7)
    assert L('Racecar') == (0, 7)
    assert L('RacecarX') == (0, 7)
    assert L('Race carr') == (7, 9)
    assert L('') == (0, 0)
    assert L('something rac e car going') == (8,21)
    assert L('xxxxx') == (0, 5)
    assert L('Mad am I ma dam.') == (0, 15)
    return 'tests pass'

print test()
